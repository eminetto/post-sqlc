// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const create = `-- name: Create :execresult
insert into person (
    first_name, last_name, created_at
) 
values(
    ?, ?, now()
)
`

type CreateParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, create, arg.FirstName, arg.LastName)
}

const delete = `-- name: Delete :exec
delete from person 
where id = ?
`

func (q *Queries) Delete(ctx context.Context, id sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
select id, first_name, last_name, created_at, updated_at from person where id = ?
`

func (q *Queries) Get(ctx context.Context, id sql.NullInt32) (Person, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const list = `-- name: List :many
select id, first_name, last_name 
from person
order by first_name
`

type ListRow struct {
	ID        sql.NullInt32
	FirstName sql.NullString
	LastName  sql.NullString
}

func (q *Queries) List(ctx context.Context) ([]ListRow, error) {
	rows, err := q.db.QueryContext(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRow
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const search = `-- name: Search :many
select id, first_name, last_name from person 
where first_name like ? or last_name like ?
`

type SearchParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
}

type SearchRow struct {
	ID        sql.NullInt32
	FirstName sql.NullString
	LastName  sql.NullString
}

func (q *Queries) Search(ctx context.Context, arg SearchParams) ([]SearchRow, error) {
	rows, err := q.db.QueryContext(ctx, search, arg.FirstName, arg.LastName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchRow
	for rows.Next() {
		var i SearchRow
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
update person 
set first_name = ?, last_name = ?, updated_at = now() 
where id = ?
`

type UpdateParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	ID        sql.NullInt32
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.ExecContext(ctx, update, arg.FirstName, arg.LastName, arg.ID)
	return err
}
